#!/usr/bin/env bash
# Usage:
#
#     $ bin/compile <build-dir> <cache-dir> <env-path>
# E.g.
# BUILD_DIR is /tmp/build_5b72bfcaef1adfe4bb7a9e34d80201fc
# CACHE_DIR is  app

topic() {
  sed "s/^/-----> /"
}

indent() {
  sed "s/^/       /"
}

# Fail fast and fail hard.
set -eo pipefail

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
LP_DIR=$(cd $(dirname $0); cd ..; pwd)
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

echo "BIN_DIR=${BIN_DIR}, ROOT_DIR=${ROOT_DIR}, BUILD_DIR=${BUILD_DIR}, CACHE_DIR=${CACHE_DIR}, pwd=$(pwd)" | indent

OPENSSL_VERSION="1.0.2e"

# The installation target is ion the BUILD_DIR, which means that
# it'll end up in the slug at runtime.
VENDOR_DIR="${BUILD_DIR}/.heroku/vendor"

# Note the escaping of ${HOME} in this line, which
# is so that we can use this path in any scripts that
# run on dynos, not in the buildpack environment. $HOME
# expands to "/app" at dyno runtime.
APP_VENDOR_DIR="\${HOME}/.heroku/vendor"

if [ ! -f ${VENDOR_DIR}/include/openssl/opensslv.h ] ; then
    echo "Installing OpenSSL ${OPENSSL_VERSION}" | topic
    echo "Downloading..." | indent
    curl -# -o ${CACHE_DIR}/openssl-${OPENSSL_VERSION}.tar.gz https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz

    echo "Unpacking and building..." | indent
    tar xzf ${CACHE_DIR}/openssl-${OPENSSL_VERSION}.tar.gz -C ${BUILD_DIR}

    pushd ${BUILD_DIR}/openssl-${OPENSSL_VERSION}
    ./config --prefix=${VENDOR_DIR}
    make && make install && make clean
    popd

    echo "Creating .profile.d entry" | topic
    mkdir -p ${BUILD_DIR}/.profile.d

    # These exports must point to /app, because the profile is
    # executed in a running dyno, not the buildpack environment
    cat <<EOF > ${BUILD_DIR}/.profile.d/openssl.sh
export PATH="${APP_VENDOR_DIR}/bin:$PATH"
export PKG_CONFIG_PATH="${VENDOR_DIR}/lib/pkgconfig:${PKG_CONFIG_PATH}"
export INCLUDE_PATH="${VENDOR_DIR}/include:${VENDOR_DIR}/include/openssl:${INCLUDE_PATH}"
export LIBRARY_PATH="${VENDOR_DIR}/lib:${LIBRARY_PATH}"
export LD_LIBRARY_PATH="${VENDOR_DIR}/lib:${LD_LIBRARY_PATH}"
EOF
    chmod +x ${BUILD_DIR}/.profile.d/openssl.sh

    echo "Install done" | indent
fi

# These exports point to the build directory, not to /app, so that
# they are correct for the current set of buildpacks. This is important
# so that binaries built by further buildpacks use the newly installed
# OpenSSL.
export PATH="${VENDOR_DIR}/bin:$PATH"
export PKG_CONFIG_PATH="${VENDOR_DIR}/lib/pkgconfig:${PKG_CONFIG_PATH}"
export INCLUDE_PATH="${VENDOR_DIR}/include:${VENDOR_DIR}/include/openssl:${INCLUDE_PATH}"
export LIBRARY_PATH="${VENDOR_DIR}/lib:${LIBRARY_PATH}"
export LD_LIBRARY_PATH="${VENDOR_DIR}/lib:${LD_LIBRARY_PATH}"

#give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|PKG_CONFIG_PATH)='  > ${LP_DIR}/export
